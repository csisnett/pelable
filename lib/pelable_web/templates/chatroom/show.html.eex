<div id="everything">
<h1><%= @chatroom.name %> </h1>
<%= if participant?(@chatroom, @user) or @chatroom.type == "public" do %>
<%= if description?(@chatroom.description) do %>
<%= @chatroom.description %>
<% end %>

<%= tag :meta, name: "channel_token",
               content: Phoenix.Token.sign(@conn, "BndIeIG1Y5aZGD534Z0WFpwG+oBWlOkeD/C1lIGvR+mSKF0rNpRWYodPr+0YM2yr", @current_user.id) %>
<%= tag :meta, name: "username", content: @current_user.username %>
<script>

function current_user_mention(){
  let username = get_user_property("username")
  let mention = "@" + username
  return mention
}

function bold_mention(str, mention){
  mention = "@" + mention
  if (str.includes(mention)) {
  let final_index = str.length
  let start_index = str.search(mention)
  let end_index = start_index + mention.length
  let before_mention = str.slice(0, start_index)
  let after_mention = str.slice(end_index, final_index)
  return before_mention + "<b>" + mention + "</b>" + after_mention
  }
  else {
    return str
  }
}

function getElementByXpath(path) {
  return document.evaluate(path, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
}

function bold_mention_element(message_element, mention_string){
  let mentions = mention_string.split(" ")
  let length = mentions.length
  mentions = mentions.filter(mention => mention !== " " && mention !== "")
  //console.log(mentions)
  let message = mentions.reduce(bold_mention, message_element.innerHTML)
  message_element.innerHTML = message
  return message_element
}

function highlight_if_mentioned(message_element, mention){
if (message_element.innerText.includes(mention))
          {
               message_element.parentNode.classList.add("highlighted-message")
           }
}

function highlight_mentions(){
  let mention = current_user_mention()
  var messages = document.getElementsByTagName("MESSAGE");
      var i;
    for (i = 0; i < messages.length; i++) {
          highlight_if_mentioned(messages[i], mention)
          /*if(messages[i].getAttribute("mentions") !== null){
          
            bold_mention_element(messages[i], messages[i].getAttribute("mentions"))
          }*/
      }
}
</script>
<div id="chat-interface">

<br><br>
<div class="vertical-menu">
<a> <b> Public Channels </b> </a>
<div id="chatroom-container">
<%= for chatroom <- @public_chatrooms do %>
<%= if seen_last_message?(@user, chatroom) do %>
<%= content_tag(:a, chatroom.name, chatroom_uuid: chatroom.uuid, href: Routes.chatroom_path(@conn, :show, chatroom.uuid)) %>
 <% else %>
 <b>
 <%= content_tag(:a, chatroom.name, chatroom_uuid: chatroom.uuid, href: Routes.chatroom_path(@conn, :show, chatroom.uuid)) %>
 </b>
 <% end %>
 <% end %>
 </div> 
<a> <b> Private Channels</b> </a>
<%= if @user.joined_chats != [] do %>
<%= for chatroom <- @private_groups do %>
<%= if seen_last_message?(@user, chatroom) do %>
<%= content_tag(:a, chatroom.name, chatroom_uuid: chatroom.uuid, href: Routes.chatroom_path(@conn, :show, chatroom.uuid)) %>
 <% else %>
 <b>
 <%= content_tag(:a, chatroom.name, chatroom_uuid: chatroom.uuid, href: Routes.chatroom_path(@conn, :show, chatroom.uuid)) %>
 </b>
 <% end %>

 <% end %>

 <%= for chatroom <- @private_conversations do %>
<%= if seen_last_message?(@user, chatroom) do %>
<%= render_private_conversation(@user, chatroom, Routes.chatroom_path(@conn, :show, chatroom.uuid)) %>
 <% else %>
 <b>
 <%= render_private_conversation(@user, chatroom, Routes.chatroom_path(@conn, :show, chatroom.uuid)) %>
 </b>
 <% end %>

 <% end %>

 <% end %>

 <%= if @user.chat_invitations != [] do %>
 <a> <b> Invitations </b> </a>
<%= for chatroom <- @user.chat_invitations do %>
<%= link chatroom.name, to: Routes.chatroom_path(@conn, :show, chatroom.uuid) %>
 <% end %>
 <% end %>

</div>
<div id="chat-box">
<%= for message <- old_messages(@user, @chatroom) do %>
   <%= render_message message %>
<% end %>
<%= if seen_last_message?(@user, @chatroom) == false and last_connection(@user, @chatroom) != nil do %>
<div class="alert alert-info fade show" id ="new-message-alert" role="alert">New messages<button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button></div>
<%= for message <- new_messages(@user, @chatroom) do %>
<%= render_message message%>
<% end %>
<% end %>
</div>


<div id="user-list">
<%= if @chatroom.type != "public" do %>
<%= if @chatroom.type == "private group team" do %>
<a> <b> Team members </b> </a>
<% else %>
<a> <b> Participants </b> </a>
<% end %>
<%= for participant <- @chatroom.participants do %>
<a> <%=  participant.username  %></a>
<% end %>
<% end %>
<a> <b>Online </b> </a>
<div id="user-container">
</div>



</div>

</div>
<a id="new_message" style="inline-block" href="#" onclick="return false;"></a> <br>
<p id="typing" style="inline-block"> </p>

<form id="chat-form">
<textarea id="body" placeholder="Your message" rows="2" cols="60"> </textarea>
<input type="submit" id="submit_button" value="Send" class="btn btn-primary">
</form>
<% else %>
<%= if show_joining_prompt?(@chatroom, @user) do %>
You have been invited to join this team
<br> <br>
<div>
<div style="display: inline-block">
<%= form_for @conn, Routes.chatroom_path(@conn, :new_participant, @chatroom.uuid), fn f -> %>
<%= submit "Accept Invitation", class: "btn btn-outline-success"%>
<% end %>
</div>
<div style="display: inline-block">
<%= form_for @conn, Routes.chatroom_path(@conn, :decline, @chatroom.uuid), fn f -> %>
  <%= submit "Decline", class: "btn btn-outline-danger"%>
<% end %>
</div>
</div>

<% end %>
<% end %>
</div>

<script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>


<script src="<%= Routes.static_path(@conn, "/js/linkify.min.js") %>" ></script>
<script src="<%= Routes.static_path(@conn, "/js/linkify-html.js") %>" ></script>

<script src="<%= Routes.static_path(@conn, "/js/dochat.js") %>"> </script>

<script type="module" src="<%= Routes.static_path(@conn, "/js/chatroom.js") %>"></script> 


<script>

function render_online_user(user){
  let user_container = document.getElementById("user-container")
  let a = document.createElement("a")
  let username = document.createTextNode(user.metas[0].username)
  a.appendChild(username)
  user_container.appendChild(a)
}

function render_online_users(list_users){
  let user_container = document.getElementById("user-container")
  while (user_container.firstChild) {
    user_container.removeChild(user_container.firstChild);
  }
  list_users.forEach(render_online_user)
}

function render_user_typing(users_string){
  //console.log(user)
  
  
let typing_container = document.getElementById("typing");
// console.log(user)
typing_container.innerText = users_string + "...";
  
  
}

 function render_users_typing(user_list){
   let typing_container = document.getElementById("typing");
   /*while (typing_container.firstChild) {
    typing_container.removeChild(typing_container.firstChild);
  }*/

  var typing_users = user_list.filter((user) => {
    if(user.metas[0].typing){
      return user
    }
  });

  //console.log(typing_users.length);
  
  if (typing_users.length == 0) {
    typing_container.setAttribute("style", "visibility: hidden;")
  } else{
    typing_container.setAttribute("style", "display: inline-block")
    var users_string = typing_users.reduce((accumulator, user) => {
    return accumulator + " " + user.metas[0].username
  }, " ");
    render_user_typing(users_string)

    
  }

  //user_list.forEach( (user) => {render_user_typing(user)})
 };
let chatBox = document.querySelector('#chat-box')
chatBox.scrollTop = chatBox.scrollHeight;
highlight_mentions()
function clean(node) {
  for(var n = 0; n < node.childNodes.length; n ++)
  {
    var child = node.childNodes[n];
    if
    (
      child.nodeType === 8 
      || 
      (child.nodeType === 3 && !/\S/.test(child.nodeValue))
    )
    {
      node.removeChild(child);
      n --;
    }
    else if(child.nodeType === 1)
    {
      clean(child);
    }
  }
}

$('#new-message-alert').on('closed.bs.alert', function () {
  var node = document.getElementById('chat-box');
  for(var n = 0; n < node.childNodes.length; n ++)
  {
    var child = node.childNodes[n];
    if
    (
      child.nodeType === 8 
      || 
      (child.nodeType === 3 && !/\S/.test(child.nodeValue))
    )
    {
      node.removeChild(child);
      n --;
    }
    else if(child.nodeType === 1)
    {
      clean(child);
    }
  }
})

 </script>